// Code generated by Kitex v0.7.2. DO NOT EDIT.

package projectsservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	projects "github.com/li1553770945/personal-projects-service/kitex_gen/projects"
)

func serviceInfo() *kitex.ServiceInfo {
	return projectsServiceServiceInfo
}

var projectsServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "ProjectsService"
	handlerType := (*projects.ProjectsService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetProjects":   kitex.NewMethodInfo(getProjectsHandler, newProjectsServiceGetProjectsArgs, newProjectsServiceGetProjectsResult, false),
		"GetProjectNum": kitex.NewMethodInfo(getProjectNumHandler, newProjectsServiceGetProjectNumArgs, newProjectsServiceGetProjectNumResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "projects",
		"ServiceFilePath": `idl/projects.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.7.2",
		Extra:           extra,
	}
	return svcInfo
}

func getProjectsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*projects.ProjectsServiceGetProjectsArgs)
	realResult := result.(*projects.ProjectsServiceGetProjectsResult)
	success, err := handler.(projects.ProjectsService).GetProjects(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProjectsServiceGetProjectsArgs() interface{} {
	return projects.NewProjectsServiceGetProjectsArgs()
}

func newProjectsServiceGetProjectsResult() interface{} {
	return projects.NewProjectsServiceGetProjectsResult()
}

func getProjectNumHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {

	realResult := result.(*projects.ProjectsServiceGetProjectNumResult)
	success, err := handler.(projects.ProjectsService).GetProjectNum(ctx)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProjectsServiceGetProjectNumArgs() interface{} {
	return projects.NewProjectsServiceGetProjectNumArgs()
}

func newProjectsServiceGetProjectNumResult() interface{} {
	return projects.NewProjectsServiceGetProjectNumResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetProjects(ctx context.Context, req *projects.ProjectsReq) (r *projects.ProjectsResp, err error) {
	var _args projects.ProjectsServiceGetProjectsArgs
	_args.Req = req
	var _result projects.ProjectsServiceGetProjectsResult
	if err = p.c.Call(ctx, "GetProjects", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetProjectNum(ctx context.Context) (r *projects.ProjectNumResp, err error) {
	var _args projects.ProjectsServiceGetProjectNumArgs
	var _result projects.ProjectsServiceGetProjectNumResult
	if err = p.c.Call(ctx, "GetProjectNum", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
