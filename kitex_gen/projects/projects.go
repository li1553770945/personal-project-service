// Code generated by thriftgo (0.3.1). DO NOT EDIT.

package projects

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/li1553770945/personal-projects-service/kitex_gen/base"
	"strings"
)

type ProjectsReq struct {
	Start  *int32  `thrift:"start,1,optional" frugal:"1,optional,i32" json:"start,omitempty"`
	End    *int32  `thrift:"end,2,optional" frugal:"2,optional,i32" json:"end,omitempty"`
	Order  *string `thrift:"order,3,optional" frugal:"3,optional,string" json:"order,omitempty"`
	Status *int32  `thrift:"status,4,optional" frugal:"4,optional,i32" json:"status,omitempty"`
}

func NewProjectsReq() *ProjectsReq {
	return &ProjectsReq{}
}

func (p *ProjectsReq) InitDefault() {
	*p = ProjectsReq{}
}

var ProjectsReq_Start_DEFAULT int32

func (p *ProjectsReq) GetStart() (v int32) {
	if !p.IsSetStart() {
		return ProjectsReq_Start_DEFAULT
	}
	return *p.Start
}

var ProjectsReq_End_DEFAULT int32

func (p *ProjectsReq) GetEnd() (v int32) {
	if !p.IsSetEnd() {
		return ProjectsReq_End_DEFAULT
	}
	return *p.End
}

var ProjectsReq_Order_DEFAULT string

func (p *ProjectsReq) GetOrder() (v string) {
	if !p.IsSetOrder() {
		return ProjectsReq_Order_DEFAULT
	}
	return *p.Order
}

var ProjectsReq_Status_DEFAULT int32

func (p *ProjectsReq) GetStatus() (v int32) {
	if !p.IsSetStatus() {
		return ProjectsReq_Status_DEFAULT
	}
	return *p.Status
}
func (p *ProjectsReq) SetStart(val *int32) {
	p.Start = val
}
func (p *ProjectsReq) SetEnd(val *int32) {
	p.End = val
}
func (p *ProjectsReq) SetOrder(val *string) {
	p.Order = val
}
func (p *ProjectsReq) SetStatus(val *int32) {
	p.Status = val
}

var fieldIDToName_ProjectsReq = map[int16]string{
	1: "start",
	2: "end",
	3: "order",
	4: "status",
}

func (p *ProjectsReq) IsSetStart() bool {
	return p.Start != nil
}

func (p *ProjectsReq) IsSetEnd() bool {
	return p.End != nil
}

func (p *ProjectsReq) IsSetOrder() bool {
	return p.Order != nil
}

func (p *ProjectsReq) IsSetStatus() bool {
	return p.Status != nil
}

func (p *ProjectsReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProjectsReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ProjectsReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Start = &v
	}
	return nil
}

func (p *ProjectsReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.End = &v
	}
	return nil
}

func (p *ProjectsReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Order = &v
	}
	return nil
}

func (p *ProjectsReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Status = &v
	}
	return nil
}

func (p *ProjectsReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ProjectsReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProjectsReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStart() {
		if err = oprot.WriteFieldBegin("start", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Start); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ProjectsReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnd() {
		if err = oprot.WriteFieldBegin("end", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.End); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ProjectsReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrder() {
		if err = oprot.WriteFieldBegin("order", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Order); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ProjectsReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Status); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ProjectsReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProjectsReq(%+v)", *p)
}

func (p *ProjectsReq) DeepEqual(ano *ProjectsReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Start) {
		return false
	}
	if !p.Field2DeepEqual(ano.End) {
		return false
	}
	if !p.Field3DeepEqual(ano.Order) {
		return false
	}
	if !p.Field4DeepEqual(ano.Status) {
		return false
	}
	return true
}

func (p *ProjectsReq) Field1DeepEqual(src *int32) bool {

	if p.Start == src {
		return true
	} else if p.Start == nil || src == nil {
		return false
	}
	if *p.Start != *src {
		return false
	}
	return true
}
func (p *ProjectsReq) Field2DeepEqual(src *int32) bool {

	if p.End == src {
		return true
	} else if p.End == nil || src == nil {
		return false
	}
	if *p.End != *src {
		return false
	}
	return true
}
func (p *ProjectsReq) Field3DeepEqual(src *string) bool {

	if p.Order == src {
		return true
	} else if p.Order == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Order, *src) != 0 {
		return false
	}
	return true
}
func (p *ProjectsReq) Field4DeepEqual(src *int32) bool {

	if p.Status == src {
		return true
	} else if p.Status == nil || src == nil {
		return false
	}
	if *p.Status != *src {
		return false
	}
	return true
}

type ProjectData struct {
	Name         string `thrift:"name,1" frugal:"1,default,string" json:"name"`
	Desc         string `thrift:"desc,2" frugal:"2,default,string" json:"desc"`
	Link         string `thrift:"link,3" frugal:"3,default,string" json:"link"`
	Status       int32  `thrift:"status,4" frugal:"4,default,i32" json:"status"`
	VolumeOfWork int32  `thrift:"volume_of_work,5" frugal:"5,default,i32" json:"volume_of_work"`
	Difficulty   int32  `thrift:"difficulty,6" frugal:"6,default,i32" json:"difficulty"`
	StartDate    int64  `thrift:"start_date,7" frugal:"7,default,i64" json:"start_date"`
	EndDate      *int64 `thrift:"end_date,8,optional" frugal:"8,optional,i64" json:"end_date,omitempty"`
}

func NewProjectData() *ProjectData {
	return &ProjectData{}
}

func (p *ProjectData) InitDefault() {
	*p = ProjectData{}
}

func (p *ProjectData) GetName() (v string) {
	return p.Name
}

func (p *ProjectData) GetDesc() (v string) {
	return p.Desc
}

func (p *ProjectData) GetLink() (v string) {
	return p.Link
}

func (p *ProjectData) GetStatus() (v int32) {
	return p.Status
}

func (p *ProjectData) GetVolumeOfWork() (v int32) {
	return p.VolumeOfWork
}

func (p *ProjectData) GetDifficulty() (v int32) {
	return p.Difficulty
}

func (p *ProjectData) GetStartDate() (v int64) {
	return p.StartDate
}

var ProjectData_EndDate_DEFAULT int64

func (p *ProjectData) GetEndDate() (v int64) {
	if !p.IsSetEndDate() {
		return ProjectData_EndDate_DEFAULT
	}
	return *p.EndDate
}
func (p *ProjectData) SetName(val string) {
	p.Name = val
}
func (p *ProjectData) SetDesc(val string) {
	p.Desc = val
}
func (p *ProjectData) SetLink(val string) {
	p.Link = val
}
func (p *ProjectData) SetStatus(val int32) {
	p.Status = val
}
func (p *ProjectData) SetVolumeOfWork(val int32) {
	p.VolumeOfWork = val
}
func (p *ProjectData) SetDifficulty(val int32) {
	p.Difficulty = val
}
func (p *ProjectData) SetStartDate(val int64) {
	p.StartDate = val
}
func (p *ProjectData) SetEndDate(val *int64) {
	p.EndDate = val
}

var fieldIDToName_ProjectData = map[int16]string{
	1: "name",
	2: "desc",
	3: "link",
	4: "status",
	5: "volume_of_work",
	6: "difficulty",
	7: "start_date",
	8: "end_date",
}

func (p *ProjectData) IsSetEndDate() bool {
	return p.EndDate != nil
}

func (p *ProjectData) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProjectData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ProjectData) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *ProjectData) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Desc = v
	}
	return nil
}

func (p *ProjectData) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Link = v
	}
	return nil
}

func (p *ProjectData) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Status = v
	}
	return nil
}

func (p *ProjectData) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.VolumeOfWork = v
	}
	return nil
}

func (p *ProjectData) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Difficulty = v
	}
	return nil
}

func (p *ProjectData) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.StartDate = v
	}
	return nil
}

func (p *ProjectData) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.EndDate = &v
	}
	return nil
}

func (p *ProjectData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ProjectData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProjectData) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ProjectData) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("desc", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Desc); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ProjectData) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("link", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Link); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ProjectData) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ProjectData) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("volume_of_work", thrift.I32, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.VolumeOfWork); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ProjectData) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("difficulty", thrift.I32, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Difficulty); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ProjectData) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("start_date", thrift.I64, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.StartDate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ProjectData) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndDate() {
		if err = oprot.WriteFieldBegin("end_date", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.EndDate); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ProjectData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProjectData(%+v)", *p)
}

func (p *ProjectData) DeepEqual(ano *ProjectData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Desc) {
		return false
	}
	if !p.Field3DeepEqual(ano.Link) {
		return false
	}
	if !p.Field4DeepEqual(ano.Status) {
		return false
	}
	if !p.Field5DeepEqual(ano.VolumeOfWork) {
		return false
	}
	if !p.Field6DeepEqual(ano.Difficulty) {
		return false
	}
	if !p.Field7DeepEqual(ano.StartDate) {
		return false
	}
	if !p.Field8DeepEqual(ano.EndDate) {
		return false
	}
	return true
}

func (p *ProjectData) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *ProjectData) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Desc, src) != 0 {
		return false
	}
	return true
}
func (p *ProjectData) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Link, src) != 0 {
		return false
	}
	return true
}
func (p *ProjectData) Field4DeepEqual(src int32) bool {

	if p.Status != src {
		return false
	}
	return true
}
func (p *ProjectData) Field5DeepEqual(src int32) bool {

	if p.VolumeOfWork != src {
		return false
	}
	return true
}
func (p *ProjectData) Field6DeepEqual(src int32) bool {

	if p.Difficulty != src {
		return false
	}
	return true
}
func (p *ProjectData) Field7DeepEqual(src int64) bool {

	if p.StartDate != src {
		return false
	}
	return true
}
func (p *ProjectData) Field8DeepEqual(src *int64) bool {

	if p.EndDate == src {
		return true
	} else if p.EndDate == nil || src == nil {
		return false
	}
	if *p.EndDate != *src {
		return false
	}
	return true
}

type ProjectsResp struct {
	BaseResp    *base.BaseResp `thrift:"baseResp,1,required" frugal:"1,required,base.BaseResp" json:"baseResp"`
	ProjectData []*ProjectData `thrift:"projectData,2,optional" frugal:"2,optional,list<ProjectData>" json:"projectData,omitempty"`
}

func NewProjectsResp() *ProjectsResp {
	return &ProjectsResp{}
}

func (p *ProjectsResp) InitDefault() {
	*p = ProjectsResp{}
}

var ProjectsResp_BaseResp_DEFAULT *base.BaseResp

func (p *ProjectsResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return ProjectsResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}

var ProjectsResp_ProjectData_DEFAULT []*ProjectData

func (p *ProjectsResp) GetProjectData() (v []*ProjectData) {
	if !p.IsSetProjectData() {
		return ProjectsResp_ProjectData_DEFAULT
	}
	return p.ProjectData
}
func (p *ProjectsResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}
func (p *ProjectsResp) SetProjectData(val []*ProjectData) {
	p.ProjectData = val
}

var fieldIDToName_ProjectsResp = map[int16]string{
	1: "baseResp",
	2: "projectData",
}

func (p *ProjectsResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ProjectsResp) IsSetProjectData() bool {
	return p.ProjectData != nil
}

func (p *ProjectsResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetBaseResp bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetBaseResp = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetBaseResp {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProjectsResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ProjectsResp[fieldId]))
}

func (p *ProjectsResp) ReadField1(iprot thrift.TProtocol) error {
	p.BaseResp = base.NewBaseResp()
	if err := p.BaseResp.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ProjectsResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.ProjectData = make([]*ProjectData, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewProjectData()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.ProjectData = append(p.ProjectData, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ProjectsResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ProjectsResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProjectsResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("baseResp", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ProjectsResp) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetProjectData() {
		if err = oprot.WriteFieldBegin("projectData", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ProjectData)); err != nil {
			return err
		}
		for _, v := range p.ProjectData {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ProjectsResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProjectsResp(%+v)", *p)
}

func (p *ProjectsResp) DeepEqual(ano *ProjectsResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseResp) {
		return false
	}
	if !p.Field2DeepEqual(ano.ProjectData) {
		return false
	}
	return true
}

func (p *ProjectsResp) Field1DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ProjectsResp) Field2DeepEqual(src []*ProjectData) bool {

	if len(p.ProjectData) != len(src) {
		return false
	}
	for i, v := range p.ProjectData {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type ProjectNumResp struct {
	BaseResp *base.BaseResp `thrift:"baseResp,1,required" frugal:"1,required,base.BaseResp" json:"baseResp"`
	Num      *int64         `thrift:"num,2,optional" frugal:"2,optional,i64" json:"num,omitempty"`
}

func NewProjectNumResp() *ProjectNumResp {
	return &ProjectNumResp{}
}

func (p *ProjectNumResp) InitDefault() {
	*p = ProjectNumResp{}
}

var ProjectNumResp_BaseResp_DEFAULT *base.BaseResp

func (p *ProjectNumResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return ProjectNumResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}

var ProjectNumResp_Num_DEFAULT int64

func (p *ProjectNumResp) GetNum() (v int64) {
	if !p.IsSetNum() {
		return ProjectNumResp_Num_DEFAULT
	}
	return *p.Num
}
func (p *ProjectNumResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}
func (p *ProjectNumResp) SetNum(val *int64) {
	p.Num = val
}

var fieldIDToName_ProjectNumResp = map[int16]string{
	1: "baseResp",
	2: "num",
}

func (p *ProjectNumResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ProjectNumResp) IsSetNum() bool {
	return p.Num != nil
}

func (p *ProjectNumResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetBaseResp bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetBaseResp = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetBaseResp {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProjectNumResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ProjectNumResp[fieldId]))
}

func (p *ProjectNumResp) ReadField1(iprot thrift.TProtocol) error {
	p.BaseResp = base.NewBaseResp()
	if err := p.BaseResp.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ProjectNumResp) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Num = &v
	}
	return nil
}

func (p *ProjectNumResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ProjectNumResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProjectNumResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("baseResp", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ProjectNumResp) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNum() {
		if err = oprot.WriteFieldBegin("num", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Num); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ProjectNumResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProjectNumResp(%+v)", *p)
}

func (p *ProjectNumResp) DeepEqual(ano *ProjectNumResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseResp) {
		return false
	}
	if !p.Field2DeepEqual(ano.Num) {
		return false
	}
	return true
}

func (p *ProjectNumResp) Field1DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ProjectNumResp) Field2DeepEqual(src *int64) bool {

	if p.Num == src {
		return true
	} else if p.Num == nil || src == nil {
		return false
	}
	if *p.Num != *src {
		return false
	}
	return true
}

type ProjectsService interface {
	GetProjects(ctx context.Context, req *ProjectsReq) (r *ProjectsResp, err error)

	GetProjectNum(ctx context.Context) (r *ProjectNumResp, err error)
}

type ProjectsServiceClient struct {
	c thrift.TClient
}

func NewProjectsServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ProjectsServiceClient {
	return &ProjectsServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewProjectsServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ProjectsServiceClient {
	return &ProjectsServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewProjectsServiceClient(c thrift.TClient) *ProjectsServiceClient {
	return &ProjectsServiceClient{
		c: c,
	}
}

func (p *ProjectsServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *ProjectsServiceClient) GetProjects(ctx context.Context, req *ProjectsReq) (r *ProjectsResp, err error) {
	var _args ProjectsServiceGetProjectsArgs
	_args.Req = req
	var _result ProjectsServiceGetProjectsResult
	if err = p.Client_().Call(ctx, "GetProjects", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ProjectsServiceClient) GetProjectNum(ctx context.Context) (r *ProjectNumResp, err error) {
	var _args ProjectsServiceGetProjectNumArgs
	var _result ProjectsServiceGetProjectNumResult
	if err = p.Client_().Call(ctx, "GetProjectNum", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type ProjectsServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      ProjectsService
}

func (p *ProjectsServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *ProjectsServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *ProjectsServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewProjectsServiceProcessor(handler ProjectsService) *ProjectsServiceProcessor {
	self := &ProjectsServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("GetProjects", &projectsServiceProcessorGetProjects{handler: handler})
	self.AddToProcessorMap("GetProjectNum", &projectsServiceProcessorGetProjectNum{handler: handler})
	return self
}
func (p *ProjectsServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type projectsServiceProcessorGetProjects struct {
	handler ProjectsService
}

func (p *projectsServiceProcessorGetProjects) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ProjectsServiceGetProjectsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetProjects", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ProjectsServiceGetProjectsResult{}
	var retval *ProjectsResp
	if retval, err2 = p.handler.GetProjects(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetProjects: "+err2.Error())
		oprot.WriteMessageBegin("GetProjects", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetProjects", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type projectsServiceProcessorGetProjectNum struct {
	handler ProjectsService
}

func (p *projectsServiceProcessorGetProjectNum) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ProjectsServiceGetProjectNumArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetProjectNum", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ProjectsServiceGetProjectNumResult{}
	var retval *ProjectNumResp
	if retval, err2 = p.handler.GetProjectNum(ctx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetProjectNum: "+err2.Error())
		oprot.WriteMessageBegin("GetProjectNum", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetProjectNum", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type ProjectsServiceGetProjectsArgs struct {
	Req *ProjectsReq `thrift:"req,1" frugal:"1,default,ProjectsReq" json:"req"`
}

func NewProjectsServiceGetProjectsArgs() *ProjectsServiceGetProjectsArgs {
	return &ProjectsServiceGetProjectsArgs{}
}

func (p *ProjectsServiceGetProjectsArgs) InitDefault() {
	*p = ProjectsServiceGetProjectsArgs{}
}

var ProjectsServiceGetProjectsArgs_Req_DEFAULT *ProjectsReq

func (p *ProjectsServiceGetProjectsArgs) GetReq() (v *ProjectsReq) {
	if !p.IsSetReq() {
		return ProjectsServiceGetProjectsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ProjectsServiceGetProjectsArgs) SetReq(val *ProjectsReq) {
	p.Req = val
}

var fieldIDToName_ProjectsServiceGetProjectsArgs = map[int16]string{
	1: "req",
}

func (p *ProjectsServiceGetProjectsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ProjectsServiceGetProjectsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProjectsServiceGetProjectsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ProjectsServiceGetProjectsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewProjectsReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ProjectsServiceGetProjectsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetProjects_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProjectsServiceGetProjectsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ProjectsServiceGetProjectsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProjectsServiceGetProjectsArgs(%+v)", *p)
}

func (p *ProjectsServiceGetProjectsArgs) DeepEqual(ano *ProjectsServiceGetProjectsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ProjectsServiceGetProjectsArgs) Field1DeepEqual(src *ProjectsReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ProjectsServiceGetProjectsResult struct {
	Success *ProjectsResp `thrift:"success,0,optional" frugal:"0,optional,ProjectsResp" json:"success,omitempty"`
}

func NewProjectsServiceGetProjectsResult() *ProjectsServiceGetProjectsResult {
	return &ProjectsServiceGetProjectsResult{}
}

func (p *ProjectsServiceGetProjectsResult) InitDefault() {
	*p = ProjectsServiceGetProjectsResult{}
}

var ProjectsServiceGetProjectsResult_Success_DEFAULT *ProjectsResp

func (p *ProjectsServiceGetProjectsResult) GetSuccess() (v *ProjectsResp) {
	if !p.IsSetSuccess() {
		return ProjectsServiceGetProjectsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ProjectsServiceGetProjectsResult) SetSuccess(x interface{}) {
	p.Success = x.(*ProjectsResp)
}

var fieldIDToName_ProjectsServiceGetProjectsResult = map[int16]string{
	0: "success",
}

func (p *ProjectsServiceGetProjectsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProjectsServiceGetProjectsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProjectsServiceGetProjectsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ProjectsServiceGetProjectsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewProjectsResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ProjectsServiceGetProjectsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetProjects_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProjectsServiceGetProjectsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ProjectsServiceGetProjectsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProjectsServiceGetProjectsResult(%+v)", *p)
}

func (p *ProjectsServiceGetProjectsResult) DeepEqual(ano *ProjectsServiceGetProjectsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ProjectsServiceGetProjectsResult) Field0DeepEqual(src *ProjectsResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ProjectsServiceGetProjectNumArgs struct {
}

func NewProjectsServiceGetProjectNumArgs() *ProjectsServiceGetProjectNumArgs {
	return &ProjectsServiceGetProjectNumArgs{}
}

func (p *ProjectsServiceGetProjectNumArgs) InitDefault() {
	*p = ProjectsServiceGetProjectNumArgs{}
}

var fieldIDToName_ProjectsServiceGetProjectNumArgs = map[int16]string{}

func (p *ProjectsServiceGetProjectNumArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ProjectsServiceGetProjectNumArgs) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("GetProjectNum_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProjectsServiceGetProjectNumArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProjectsServiceGetProjectNumArgs(%+v)", *p)
}

func (p *ProjectsServiceGetProjectNumArgs) DeepEqual(ano *ProjectsServiceGetProjectNumArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type ProjectsServiceGetProjectNumResult struct {
	Success *ProjectNumResp `thrift:"success,0,optional" frugal:"0,optional,ProjectNumResp" json:"success,omitempty"`
}

func NewProjectsServiceGetProjectNumResult() *ProjectsServiceGetProjectNumResult {
	return &ProjectsServiceGetProjectNumResult{}
}

func (p *ProjectsServiceGetProjectNumResult) InitDefault() {
	*p = ProjectsServiceGetProjectNumResult{}
}

var ProjectsServiceGetProjectNumResult_Success_DEFAULT *ProjectNumResp

func (p *ProjectsServiceGetProjectNumResult) GetSuccess() (v *ProjectNumResp) {
	if !p.IsSetSuccess() {
		return ProjectsServiceGetProjectNumResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ProjectsServiceGetProjectNumResult) SetSuccess(x interface{}) {
	p.Success = x.(*ProjectNumResp)
}

var fieldIDToName_ProjectsServiceGetProjectNumResult = map[int16]string{
	0: "success",
}

func (p *ProjectsServiceGetProjectNumResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProjectsServiceGetProjectNumResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProjectsServiceGetProjectNumResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ProjectsServiceGetProjectNumResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewProjectNumResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ProjectsServiceGetProjectNumResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetProjectNum_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProjectsServiceGetProjectNumResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ProjectsServiceGetProjectNumResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProjectsServiceGetProjectNumResult(%+v)", *p)
}

func (p *ProjectsServiceGetProjectNumResult) DeepEqual(ano *ProjectsServiceGetProjectNumResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ProjectsServiceGetProjectNumResult) Field0DeepEqual(src *ProjectNumResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
